#pragma kernel CSMain

struct Vertex
{
    float3 position;
    float4 colour;
};

struct TableLookup
{
    int entry[16];
};


AppendStructuredBuffer<Vertex> appendBuffer;
StructuredBuffer<TableLookup> lookupTable;

Buffer<float3> cubePoints;

float size;
float width;
int cubeType;

int SampleVolume(uint3 id)
{
    
}

[numthreads(8, 8, 8)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    //Normalize pos
    float3 pos = id / (width - 1);

    //make pos range from -size to +size
    pos = (pos - 0.5) * 2.0 * size;
    
    Vertex v1;
    v1.position = pos;
    v1.colour = float4(1, 1, 1, 1);
    appendBuffer.Append(v1);
    
    return;
    if (id.x == 0 && id.y == 0)
    {
        int lookupVal[] = lookupTable[cubeType].entry;
        
        for (int i = 0; i < 16; i++)
        {
            if (lookupVal[i] == -1)
            {
                break;
            }
            
            Vertex v1;
            v1.position = cubePoints[lookupVal[i]];
            v1.colour = float4(1, 1, 1, 1);
            appendBuffer.Append(v1);
        }
        
    }
}